# This script contains the function for k_fold validation.
### Input
# k_fold takes two arguments:
# K is the keyfold group used for subsetting train and test data. 
# You want to pass K as a numeric (ex. 1:5 for 5-fold validation) within a for loop, apply, or map function
# dataset is the data on which to run the kfold validation.
# dataset should contain 6 columns in order: 
# 'x' coordinate
# 'y' coordinate
# four predictor variables
# presence/background boolean variable (1/0)
# kfold group (1 to 5 for 5-fold validation)
### Output
# k_fold() returns a dataframe with 
# HS = habitat suitability (from ecospat.boyce())
# PE = predicted to expected ratio (from ecospat.boyce())
# Spearman = Spearman's correlation coefficient
# AUC = AUC (from evalute())
# MSS = Maximum Specificity Sensitivity (calculated from evaluate())
# OR.min = minimum omission rate (from suitability map)
# OR10 = omission rate 0.1 quantilre (from suitabiltiy map)

k_fold <- function(K, dataset){
  train <- dataset %>% filter(kfold != K)
  test <- dataset %>% filter(kfold == K)
  me <- maxnet(p = train$presence, data = train[3:6],
               f = maxnet.formula(p = train$presence, data = train[3:6], classes = 'lqh'))
  # continuous boyce index
  suitability_obs <- predict(me, train[which(train$presence == 1), 3:6], type = "cloglog")
  suitability_test <- predict(me, test[3:6], type = "cloglog")
  cbi <- ecospat.boyce(suitability_test, suitability_obs, res = 100, PEplot = F)
  HS <- cbi$HS
  PE <- cbi$F.ratio
  cbi <- cbi$Spearman.cor
  # AUC
  suitability_abs <- predict(me, test[which(train$presence == 1), 3:6], type = "cloglog")
  eval <- evaluate(as.vector(suitability_obs), as.vector(suitability_abs))
  auc <- eval@auc
  # ORMin - model overfitting
  OR_min <- min(suitability_obs)
  # OR10
  OR_ten <- sort(suitability_obs)[ceiling(length(suitability_obs) / 10)]
  # MSS
  MSS <- eval@t[which.max(eval@TPR + eval@TNR)]
  return(
    data.frame(
      HS = HS, 
      PE = PE, 
      Spearman = rep(cbi, length(PE)), 
      AUC = rep(auc, length(PE)),
      MSS = rep(MSS, length(PE)),
      OR.min = rep(OR_min, length(PE),
      OR10 = rep(OR_ten, length(PE)))
    )
  )
}
